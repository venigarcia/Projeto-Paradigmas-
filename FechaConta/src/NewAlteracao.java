import java.awt.Color;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import model.RestauranteModel;
import model.Garcom;
import model.Cardapio;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author carlos_vinicios
 */
public class NewAlteracao extends javax.swing.JDialog {
    private DefaultListModel listModel;
    private ArrayList <Garcom> garcons;
    private ArrayList <Cardapio> cardapio;
    private RestauranteModel restaurante;
    private int tipo; //1 - alteração de funcionario 2 - alteração de cardapio 3 - gorjeta do garçom
    /**
     * Creates new form NewAlteracao
     * @param tipo
     */
    public NewAlteracao(String tipo, RestauranteModel restaurante) {
        initComponents();
        this.setModal(true);
        this.setLocationRelativeTo( null );
        this.getContentPane().setBackground(new Color(205, 179, 159));
        this.restaurante = restaurante;
        this.titlejLabel.setText("Selecione o " + tipo);
        if("funcionário".equals(tipo)){
            feedListFuncionario();
            this.tipo = 1;
        }else{
            if("item do cardápio".equals(tipo)){
                feedListCardapioItem();
                this.tipo = 2;
            }else{
                if("gorjeta".equals(tipo)){
                    this.editarjButton.setText("Selecionar");
                    feedListFuncionario();
                    this.tipo = 3;
                }
            }
        }
    }
    
    private void feedListFuncionario(){
        int i;
        String text;
        this.listModel = new DefaultListModel();
        this.alterarjList.setModel(listModel);
        this.garcons = this.restaurante.getGarcons();
        for(i=0; i < this.garcons.size(); i++){
            text = this.garcons.get(i).getCod() + " - " + this.garcons.get(i).getNome();
            this.listModel.addElement(text);
        }
    }
    
    private void feedListCardapioItem(){
        int i;
        String text;
        this.listModel = new DefaultListModel();
        this.alterarjList.setModel(listModel);
        this.cardapio = this.restaurante.getCardapio();
        for(i=0; i < this.cardapio.size(); i++){
            text = this.cardapio.get(i).getCod() + " - " + this.cardapio.get(i).getDecricao() + " - " + this.cardapio.get(i).getPreco();
            this.listModel.addElement(text);
        }
    }
    
    private ArrayList selecaoParam(String textBusca){
        int i;
        ArrayList busca = new ArrayList(); //cria um array para armazenar o resultado da busca
        for(i=0; i < listModel.size(); i++){ //realiza a busca dentro do model
            String item = (String) this.listModel.get(i);
            if(item.contains(textBusca)){
                busca.add(i);
            }
        }
        return busca;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        titlejLabel = new javax.swing.JLabel();
        buscarText = new javax.swing.JTextField();
        buscarjButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        alterarjList = new javax.swing.JList<>();
        editarjButton = new javax.swing.JButton();
        cancelarjButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Alteração");
        setBackground(new java.awt.Color(205, 179, 159));
        setFont(new java.awt.Font("Segoe UI Symbol", 0, 14)); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        titlejLabel.setFont(new java.awt.Font("Segoe UI Symbol", 0, 24)); // NOI18N
        titlejLabel.setText("Selecione o funcionário");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 30, 0);
        getContentPane().add(titlejLabel, gridBagConstraints);

        buscarText.setBackground(new java.awt.Color(234, 221, 212));
        buscarText.setFont(new java.awt.Font("Segoe UI Symbol", 0, 12)); // NOI18N
        buscarText.setMinimumSize(new java.awt.Dimension(30, 27));
        buscarText.setPreferredSize(new java.awt.Dimension(40, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 6, 0);
        getContentPane().add(buscarText, gridBagConstraints);

        buscarjButton.setBackground(new java.awt.Color(33, 12, 18));
        buscarjButton.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        buscarjButton.setForeground(new java.awt.Color(240, 240, 240));
        buscarjButton.setText("Buscar");
        buscarjButton.setPreferredSize(new java.awt.Dimension(85, 35));
        buscarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarjButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 6, 10);
        getContentPane().add(buscarjButton, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(318, 190));

        alterarjList.setBackground(new java.awt.Color(234, 221, 212));
        alterarjList.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        alterarjList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        alterarjList.setPreferredSize(new java.awt.Dimension(40, 0));
        alterarjList.setSelectionBackground(new java.awt.Color(33, 12, 18));
        jScrollPane1.setViewportView(alterarjList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 30, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        editarjButton.setBackground(new java.awt.Color(33, 12, 18));
        editarjButton.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        editarjButton.setForeground(new java.awt.Color(240, 240, 240));
        editarjButton.setText("Editar");
        editarjButton.setMaximumSize(new java.awt.Dimension(85, 40));
        editarjButton.setMinimumSize(new java.awt.Dimension(85, 40));
        editarjButton.setPreferredSize(new java.awt.Dimension(100, 40));
        editarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarjButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 90, 20, 0);
        getContentPane().add(editarjButton, gridBagConstraints);

        cancelarjButton.setBackground(new java.awt.Color(33, 12, 18));
        cancelarjButton.setFont(new java.awt.Font("Segoe UI Symbol", 1, 14)); // NOI18N
        cancelarjButton.setForeground(new java.awt.Color(240, 240, 240));
        cancelarjButton.setText("Cancelar");
        cancelarjButton.setMaximumSize(new java.awt.Dimension(100, 40));
        cancelarjButton.setMinimumSize(new java.awt.Dimension(100, 40));
        cancelarjButton.setPreferredSize(new java.awt.Dimension(100, 45));
        cancelarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarjButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        getContentPane().add(cancelarjButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarjButtonActionPerformed
        //pegar o indice selecionado e mandar o objeto para a tela de criação onde as opções já vão estar preenchidas
        if(tipo == 1){
            new NewFuncionario(this.restaurante, this.alterarjList.getSelectedIndex()).setVisible(true);
        }else{
            if(tipo == 2){
                new NewCardapioItem(this.restaurante, this.alterarjList.getSelectedIndex()).setVisible(true);
            }else{
                if(tipo == 3){
                    new totalDiaGarcom(this.garcons.get(this.alterarjList.getSelectedIndex()).getGorjetaTotal()).setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_editarjButtonActionPerformed

    private void cancelarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarjButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelarjButtonActionPerformed

    private void buscarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarjButtonActionPerformed
        //filtra a lista com base no código ou texto dado
        String textBusca = this.buscarText.getText();
        String option;
        int i;
        ArrayList resp;
        resp = selecaoParam(textBusca);
        if( resp.size() > 1){
            String textMessage = "Foram encontrados mais de uma referência para busca, selecione e digite o código correspondente:\n";
            for(i=0; i < resp.size(); i++)
                textMessage = textMessage + listModel.get((int)resp.get(i)) + "\n";
            option = JOptionPane.showInputDialog(null, textMessage, "Elementos repetidos", -1); //cria a caixa de dialogo com os valores semelhantes encontrados
            resp = selecaoParam(option);
        }
        this.alterarjList.setSelectedIndex((int)resp.get(0)); //seta o indice selecionado
        this.buscarText.setText(""); //limpa o campo de busca
    }//GEN-LAST:event_buscarjButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> alterarjList;
    private javax.swing.JTextField buscarText;
    private javax.swing.JButton buscarjButton;
    private javax.swing.JButton cancelarjButton;
    private javax.swing.JButton editarjButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel titlejLabel;
    // End of variables declaration//GEN-END:variables
}
